<h3>Component::<code>input-wrapper</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>input-wrapper</code> component is a 1:1 companion to atomic components such as the <em>text-input</em>, <em>number-input</em>, 
        etc. Whereas the atomic components represent the HTML <strong>input</strong> element solely, the <code>input-wrapper</code> is the surrounding
        HTML which provides the next level of ornamentation including:
        
        <ul>
            <li>prefix and postfix input addons</li>
            <li>label services</li>
            <li>additional error/status visualisation</li>
        </ul>
    </desc>
    <desc>
        While this component, like its atomic relatives, does not depend on Twitter Bootstrap, the design philosophy does borrow from it where ever 
        possible.
    </desc>
</div>

<h4>Prefix and Postfix</h4>
<div class="row">
    <desc>
        
        <img src="images/pre-and-postfix.png" width="474" height="68" alt="Pre And Postfix">
        
        If you look at the Bootstrap documentation under the heading of "Input Groups" you'll see the general patterns which we're referring to here.
        In essense this area of functionality is about putting sensibly styled information <em>before</em> and <em>after</em> the HTML input control. 
        What resides in these pre and postfix areas can be any of the following:
        
        <ul>
            <li>Text and/or Icon</li>
            <li>A checkbox toggle switch</li>
            <li>A radio choice selector</li>
            <li>A dropdown choice</li>
        </ul>
        
    </desc>
</div>

<div class="row">
    <desc>
        Since this is our first section, we'll start by illustrating the various styles of 
        block helpers that the <code>input-wrapper</code> allows for:
    </desc>
    
    <div class="col-xs-4">
{{#code-block lang='hbs'}}
\{{#input-wrapper}}
    \{{#input-addon}}
        <i class="fa fa-phone"></i>
    \{{/input-addon}}
    \{{text-input}}
    \{{#input-addon}}.00\{{/input-addon}}
\{{/input-wrapper}}
{{/code-block}}            
    </div>
    <div class="col-xs-4">
{{#code-block lang='hbs'}}
\{{#input-wrapper}}
    \{{input-addon icon='phone'}}
    \{{text-input}}
    \{{input-addon text='.00'}}
\{{/input-wrapper}}
{{/code-block}}            
    </div>
    <div class="col-xs-4">
{{#code-block lang='hbs'}}
\{{#input-wrapper 
    prefixIcon='bell' postfixText='.00'}}
    \{{text-input}}
\{{/input-wrapper}}
{{/code-block}}            
    </div>
</div>
    
<div class="row">
    <desc>
        In each example -- going from left to right -- there is a more <em>inline</em> style that is being demonstrated. However, for the 
        <code>input-wrapper</code> component, it's usage will always be a block component because it will always wrap the input control.
        This allows you to choose as compact a style as you feel suits the problem you are trying to solve. 
    </desc>
</div>
<h5>Text/Icon Ornamentation</h5>
<div class="row">
    <desc>
        To start, text/icon ornamentation is just a case of properties -- <em>icon</em> and <em>text</em> -- placed in two locations: 
        <em>pre</em> and <em>post</em> the input control. Pretty straight forward, use the example below to have a play around:
    </desc>
</div>    

<div class="examples">
    <table style="width:100%">
        <tr>
            <td class="col-xs-12 col-sm-4 text-center align-middle">
                {{#input-wrapper 
                    prefixText=prefixText prefixIcon=prefixIcon postfixText=postfixText postfixIcon=postfixIcon 
                    size=size iconFamily=iconFamily
                }}
                    {{text-input placeholder='text-input' size=size}}
                {{/input-wrapper}}
            </td>
            <td class="hidden-xs col-sm-8">
                {{#code-block language="handlebars" poll=500}}
\{{#input-wrapper iconFamily='{{iconFamily}}' size='{{size}}'
    {{#if prefixText}}prefixText='{{prefixText}}'  {{/if}}{{#if prefixIcon}}prefixIcon='{{prefixIcon}}'
    {{/if}}{{#if postfixText}}postfixText='{{postfixText}}' {{/if}}{{#if postfixIcon}}postfixIcon='{{postfixIcon}}'{{/if}} 
}}
    \{{text-input placeholder='text-input'}}
\{{\input-wrapper}}   
                {{/code-block}}         
            </td>
        </tr>
    </table>
</div>
<p></p>
<div class="configuration col-xs-12">
    <div class="config-icon col-xs-1">{{icon-cog size="2x"}}</div>
    <div class="config-section col-xs-11">
        <div class="row">
            <div class="col-xs-4">
                Prefix Text: {{text-input width='140px' size='small' value=prefixText}}<br/>
                Prefix Icon: {{text-input width='140px' size='small' value=prefixIcon}}                
            </div>
            <div class="col-xs-4">
                Postfix Text: {{text-input width='140px' size='small' value=postfixText}}<br/>
                Postfix Icon: {{text-input width='140px' size='small' value=postfixIcon}}                
            </div>
            <div class="col-xs-4">
                Icon Family:<br/>
                {{ui-bs-button-choice choices=iconFamilies selected=iconFamily size='small' stretch=true}}<br/>
                Size:<br/>
                {{ui-bs-button-choice choices=sizes selected=size size='small' stretch=true}}
            </div>
        </div>
        <note>
            <strong>Note:</strong> 
            this test application has <em>both</em> Glyphicons and FontAwesome icon fonts loaded and that's why you can switch. In most 
            cases you will only load one of these and in these situations it is recommended that you just set the <code>iconFamily</code>
            property in the <code>environment.js</code> file.
        </note>
        
    </div>
</div>
<div class="row">
</div>    

<h5>Checkbox Ornamentation</h5>
<div class="row">
    <desc>
        In many regards a checkbox is no different than text and/or icons but with the exception that it actually has "state" 
        (aka, is the checkbox checked and what does that mean?). This one addition gives us two features/functions that are in addition to 
        what we showed in the text/icon examples:
    
        <ul>
            <li>
                <strong>State</strong> - the property <code>prefixValue</code> and <code>postfixValue</code> will map to the two locational states 
                that the checkbox can reside. Once you've bound a variable to one of these properties the checkbox will immediately 
                appear at the appropriate pre/post location.
            </li>
            <li>
                <strong>Disablement</strong> - a boolean property <code>disableNotChecked</code> that when set to <em>true</em> will 
                enable/disable the INPUT component based on the state of the checkbox
            </li>
        </ul>
    
         Try out the examples below for more details:
    </desc>    
</div>

<div class="examples">
    <table style="width:100%">
        <tr>
            <td class="col-xs-12 col-sm-4 text-center align-middle">
                {{#input-wrapper 
                    prefixCheckbox=true 
                    prefixValue=prefixValue 
                    size=size 
                    iconFamily=iconFamily 
                    prefixText=checkLabel 
                    disableNotChecked=disableNotChecked
                }}
                    {{text-input placeholder='text-input' size=size}} 
                {{/input-wrapper}}
                
                {{#if prefixCheckbox}}
                    checkbox value: {{prefixValue}}
                {{/if}}
            </td>
            <td class="hidden-xs col-sm-8">
                {{#code-block language="handlebars" poll=100}}
\{{#input-wrapper 
    prefixCheckbox=true prefixValue={{prefixValue}} disableNotChecked={{disableNotChecked}} prefixText='{{checkLabel}}'
    iconFamily='{{iconFamily}}' size='{{size}}'
}}
    \{{text-input placeholder='text-input'}}
\{{\input-wrapper}}   
                {{/code-block}}
            </td>
        </tr>
    </table>
</div>
<p></p>

<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
                <column>
                    disableNotChecked<br/>
                    {{ui-toggle-button value=disableNotChecked}} 
                </column>
                <column >
                    Prefix Text:<br/>
                    {{text-input width='140px' size='small' value=checkLabel}}
                </column>
                <column >
                    Size:<br/>
                    {{ui-bs-button-choice choices=sizes selected=size size='small' stretch=true}}
                </column>          
        </columns>
    </config>
</configuration>


<h5>Radio Ornamentation</h5>
<desc>
    This is (or <em>will be</em>) very similar to the checkbox ornamentation but is slightly more complicated in that state management spans -- in some ways 
    at least -- across input elements. For this reason and because it seems a less useful control in general, it has not been prioritized. Please feel free to submit
    a PR to get it into the mix if you're missing this functionality.
</desc>

<h5>Dropdown Ornamentation</h5>
<desc>
    This is definately a cool pre/postfix addon but not included in this release. Again very happy to include it in a PR if you've got the time.
</desc>

<h5>Button Ornamentation</h5>
<desc>
    The button ornamentation is nice too but we're putting this on hold until we have time to port buttons into the framework as atomic units (equivalent to input elements) and then we'll add a "group button". If you want this now it should be easy enough to do with block-component techniques.
</desc>


<h4>Labels</h4>
<div class="row">
    <desc>
        A "label" has a 1:1 relationship with an input field, or maybe a better way of thinking about it is it has a 1:1 relationship to an 
        input-group where an "input-group" is the input control and any/all addons which were added. If you look at an HTML example from Bootstrap's 
        site you'll find this example amoung the many:
        
        <indent>
        {{#code-block lang='html'}}
<div class="form-group has-success has-feedback">
  <label class="control-label" for="inputGroupSuccess1">Input group with success</label>
  <div class="input-group">
    <span class="input-group-addon">@</span>
    <input type="text" class="form-control" id="inputGroupSuccess1" aria-describedby="inputGroupSuccess1Status">
  </div>
  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
  <span id="inputGroupSuccess1Status" class="sr-only">(success)</span>
</div>
        {{/code-block}}
        </indent>
        
        This provides a useful view into the structure.
    </desc>
    
</div>




