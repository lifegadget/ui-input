<div class="flash-messages">
  {{#each flashMessages.queue as |flash|}}
    {{#flash-message flash=flash as |component flash|}}
      {{#if flash.componentName}}
        {{component flash.componentName content=flash.content}}
      {{else}}
        <h6>{{component.flashType}}</h6>
        <p>{{flash.message}}</p>
      {{/if}}
    {{/flash-message}}
  {{/each}}
</div>


<h3>Passwords</h3>
<div class="row">
  <div class="col-6 col-lg-3">
    {{password-input
      placeholder='password'
      value=password
      showPassword=show
      onSecure=(action (mut security))
      onChange=(action (mut password))
    }}
    <p class="text-muted">
      <br>
      {{ui-toggle-button
        on='hide password'
        off='show password'
        size='small'
        value=show
        onToggle=(mut show)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <pre><code class='handlebars'>\{{password-input
  placeholder='password'
  value=password
  showPassword=show
  onSecure=(action (mut security))
  onChange=(action (mut password))
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      Passwords are mainly just text-inputs but with a few extra tricks up their sleeves:

      **Show Passwords**: toggling the `showPassword` property allows a user to expose the password when typing.

      **Password Stength**: _this is still a work in progress_
    {{/ui-markdown}}
  </div>
</div>

<h3>Emails</h3>
<div class="row">
  <div class="col-6 col-lg-3">
    {{email-input
      placeholder='email address'
      value=email
      onValidation=(action (mut validity))
      onWarning=(action 'emailWarn')
      onChange=(action (mut email))
    }}
    <br>
    value: {{email}}
    <br>
    validation: {{validity.emailValidator.state}} ({{validity.emailValidator.code}})

  </div>
  <div class="col-6 col-lg-4">
    <span>
      <pre><code class='handlebars'>\{{email-input
  placeholder='email address'
  value=email
  onValidation=(action (mut validity))
  onWarning=(action 'emailWarn')
  onChange=(action (mut email))
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      Email's are also closely related to the text-input but have a _validation_ "emailValidity" which indicates whether the current value is a valid email address. This validation rule is applied like others validation rules (see "validation" tab) and is named `emailValidator` and like other validations returns a "state", and "code" property which specifies whether the field is in a valid state or not:

      - `state` values include "empty", "valid", and "invalid"
      - `code` values are "ok" if state is _empty_ or _valid_

      In this case we are mutating the _validity_ property on the controller and we can then access the "state" with `\{{validity.emailValidator.state}}`
    {{/ui-markdown}}
  </div>
</div>

<h3>Name Input</h3>
<div class="row">
  <div class="col-6 col-lg-3">
    {{name-input
      preIcon='user'
      value=name
      onBlur=(action (mut name))
    }}

    <br>

    {{name-input
      value=name2
      onChange=(action (mut name2))
    }}

    <p>
      name: <br>
      <pre><code>{{json name}}</code></pre>
    </p>
    <p>
      name2: <br>
      <pre><code>{{json name2}}</code></pre>
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <pre><code class='handlebars'>\{{name-input
  preIcon='user'
  value=name
  onBlur=(action (mut name))
}}</code></pre>
<br>
<pre><code class='handlebars'>\{{name-input
  value=name2
  onChange=(action (mut name2))
}}</code></pre>

  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      While cutting your own name input dialog is easy enough it is common enough a pattern that we've built a
      container component to give you a structured first and last name input dialog.
    {{/ui-markdown}}
  </div>
</div>
