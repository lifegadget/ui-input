<h3>text-input <span class='side-note'>component</span></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <prop>text-input</prop> control is the simplist of the set of atomic input controls. Since it's primary function is capturing <em>string</em> values
        it is worth noting that an input control left blank will be equal to an empty string not a <em>null</em> value (this is opposite to a numeric input).
        If you would prefer that an empty string is viewed as a <em>null</em> value then just set the <code>emptyIsNull</code> property to true.

    </desc>
</div>

{{#demo-css}}
<h4>Basic Usage</h4>
<row>
  <widget>
    {{text-input
      skin=skin
      status=status
      size=size
      mood=mood
      placeholder=placeholder
      textAlign=textAlign
    }}
  </widget>
  <code>
    {{display-component
      componentName='text-input'
      skin=skin
      status=status
      size=size
      mood=mood
      placeholder=placeholder
      textAlign=textAlign
    }}
  </code>
  <description>
    Basic usage includes setting properties such as:
    <br/>
    <controls>
      <control>
        <span class='name'>placeholder:</span>
        <span>
          {{text-input value=placeholder skin='flat' size='small'}}
        </span>
      </control>
      <control>
        <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='default,primary,info,success,warning,error' value=mood size='tiny' defaultValue='default'}}</span>
      </control>
      <control>
        <span class='name'>size:</span> <span>{{radio-buttons buttons='tiny,small,default,large,huge' value=size size='tiny' defaultValue='default'}}</span>
      </control>
      <control>
        <span class='name'>text-align:</span> <span>{{radio-buttons buttons='left,center,right' value=textAlign size='tiny' defaultValue='default'}}</span>
      </control>
      <control>
        <span class='name'>skin:</span>
        <span>
          {{radio-buttons buttons='bootstrap,flat' value=skin size='tiny' defaultValue='bootstrap'}}
        </span>
      </control>
      <control>
        <span class='name'>status:</span>
        <span>
          {{radio-buttons buttons='none:::null,info,success,warning,error' value=status size='tiny'}}
        </span>
      </control>
    </controls>

  </description>
</row>


<h4>Style Properties</h4>
<row>
  <widget>
    {{text-input
      placeholder='text-input'
      color=color
      backgroundColor=backgroundColor
      borderColor=borderColor
      outlineColor=outlineColor
      width=width
      height=height
    }}
  </widget>
  <code>
    {{display-component
      componentName='text-input'
      placeholder='text-input'
      color=color
      backgroundColor=backgroundColor
      borderColor=borderColor
      outlineColor=outlineColor
      width=width
      height=height
    }}
  </code>
  <description>
    <p>
      There are specific settings that can be dynamically controlled from the component which are then translated into the <b>skin</b> property of the HTML.
    </p>
    <p>
      <b>Color</b> is a good example of this. Mood skins (from above) may be enough sometimes but if you need greater control:

      <controls>
        <control>
          <span>text:</span>
          <span>{{text-input skin='flat' size='small' value=color}}</span>
          <span>backgrnd:</span>
          <span>{{text-input skin='flat' size='small' value=backgroundColor}}</span>
        </control>
        <control>
          <span>border:</span>
          <span>{{text-input skin='flat' size='small' value=borderColor}}</span>
          <span>outline:</span>
          <span>{{text-input skin='flat' size='small' value=outlineColor}}</span>
        </control>
      </controls>
    </p>
    <p>
      Another example is sizing ... <prop>size</prop> from above will suit many situations but sometimes you'll want to dig into <prop>width</prop> and <prop>height</prop> properties for greater control (note: trying setting height to 'square' or 'golden' to get a ratio):

      <controls>
        <control>
          <span>width:</span>
          <span>{{text-input skin='flat' size='small' value=width}}</span>
          <span>height:</span>
          <span>{{text-input skin='flat' size='small' value=height}}</span>
        </control>
      </controls>

    </p>
  </description>
</row>

<h4>Rules</h4>
<row>
  <widget>
    {{text-input
      placeholder='text-input'
      animateRuleLengthLimit=animateRuleLength
      animateRuleLengthWarn=animateRuleLength
      animateRuleInvalidEmail=animateRuleInvalidEmail
      rules=rules
      length=length
    }}
  </widget>
  <code>
    {{display-component
      componentName='text-input'
      placeholder='text-input'
      animateRuleLengthLimit=animateRuleLength
      animateRuleLengthWarn=animateRuleLength
      animateRuleInvalidEmail=animateRuleInvalidEmail
      rules=rules
      length=length
    }}
  </code>
  <description>
    <p>
      Rules can be applied to enforce desired behaviour. The rules for a text input are:
      <ul>
        <li>
          <code>lengthLimit</code> -
          Limits input to an allowable length (set in component as 'length' but tranlated into HTML as 'size').
        </li>
        <li>
          <code>lengthWarn</code> -
          Warns visually when the suggested length has been exceeded but
          does not prohibit further input. Instead is will trigger any animation, sound, or status change.
        </li>
        <li>
          <code>invalidEmail</code> -
          Triggers when input moves into an invalid representation of an email address (although ignores a null value).
        </li>
      </ul>
    </p>
    <p>
      <controls>
        <control>
          <span class='name'>Rule:</span>
          <span>{{radio-buttons buttons='none:::null,lengthLimit::lengthLimit,lengthWarn::lengthWarn,email::invalidEmail' value=rules size='small'}}</span>
        </control>
        <control>
          <span class='name'>Length:</span>
          <span>{{text-input skin='flat' size='small' value=length}}</span>
          <span class='name'>animate invalidEmail:</span>
          <span>{{text-input skin='flat' size='small' value=animateRuleInvalidEmail}}</span>
        </control>
        <control>
          <span class='name'>animate lengthLimit:</span>
          <span>{{text-input skin='flat' size='small' value=animateRuleLengthLimit}}</span>
          <span class='name'>animate lengthWarn:</span>
          <span>{{text-input skin='flat' size='small' value=animateRuleLengthWarn}}</span>
        </control>
      </controls>
    </p>
  </description>
</row>

<h4>Animation and Effects</h4>
<row>
  <widget>
    {{text-input
      placeholder='text-input'
      animateFocusIn=animateFocusIn
      animateMouseEnter=animateMouseEnter
      animateMouseClick=animateMouseClick
      animateSubmit=animateSubmit
      animateChange=animateChange
      animateRuleLengthLimit=animateRuleLength
      animateRuleLengthWarn=animateRuleLength
    }}
  </widget>
  <code>
    {{display-component
      componentName='text-input'
      placeholder='text-input'
      animateFocusIn=animateFocusIn
      animateMouseEnter=animateMouseEnter
      animateMouseClick=animateMouseClick
      animateSubmit=animateSubmit
      animateChange=animateChange
      animateRuleLengthLimit=animateRuleLength
      animateRuleLengthWarn=animateRuleLength
    }}
  </code>
  <description>
    <p>
      When certain user events take place you can visually alert people with animation. Animations use CSS to animate and borrow from the <b>animate.css</b> library.
    </p>
    <p>
      Choose an animation from (tada, bounce, pulse, shake, etc.):

      <controls>
        <control>
          <span class='name'>focusIn:</span>
          <span>{{text-input skin='flat' size='small' value=animateFocusIn}}</span>
          <span class='name'>focusOut:</span>
          <span>{{text-input skin='flat' size='small' value=animateFocusOut}}</span>
        </control>
        <control>
          <span class='name'>mouseEnter:</span>
          <span>{{text-input skin='flat' size='small' value=animateMouseEnter}}</span>
          <span class='name'>mouseClick:</span>
          <span>{{text-input skin='flat' size='small' value=animateMouseClick}}</span>
        </control>
        <control>
          <span class='name'>submit:</span>
          <span>{{text-input skin='flat' size='small' value=animateSubmit}}</span>
          <span class='name'>change:</span>
          <span>{{text-input skin='flat' size='small' value=animateChange}}</span>
        </control>
      </controls>
    </p>
    <p>
      Beyond animation, inputs can trigger sound effects or <a href="http://www.w3.org/TR/vibration/">vibrations</a>. Like in animation you just attach the sound or vibration to an event.

      <controls>
        <control>
          <span class='name'>focusIn:</span>
          <span>{{text-input skin='flat' size='small' value=animateFocusIn}}</span>
          <span class='name'>focusOut:</span>
          <span>{{text-input skin='flat' size='small' value=animateFocusOut}}</span>
        </control>
      </controls>
    </p>
  </description>
</row>

<h4>Actions Up</h4>
<row>
  <widget>
    {{text-input
      placeholder='text-input'
      changed='changed'
      action='action'
      error='error'
      length=5
      rules='lengthLimit'
    }}
  </widget>
  <code>
    {{display-component
      componentName='text-input'
      placeholder='text-input'
      changed='changed'
      action='action'
      error='error'
      length=5
      rules='lengthLimit'
    }}
  </code>
  <description>
    <p>
      While a user can create a two-way binding to <prop>value</prop> it is often desirable to rely on actions being passed back up to the container. This achieved with binding to one or more of the following actions:
      <ul>
        <li><b>action</b><span class="func-signature">(evt-type,obj,evt)</span> - user events</li>
        <li><b>changed</b><span class="func-signature">(obj,evt)</span> - only broadcasts when the value has changed.</li>
        <li><b>error</b><span class="func-signature">(code,obj,msg)</span> - when constraints are surpassed</li>
      </ul>
    </p>

  </description>
</row>
<div class="flash-window">
  {{#each flashMessages.queue as |flash|}}
    {{flash-message flash=flash}}
  {{/each}}
</div>

{{/demo-css}}

