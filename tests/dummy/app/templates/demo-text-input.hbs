{{#markdown-convert style='github'}}
  ## Component: `text-input`

  The `text-input` component provides a bootstrap and HTML5 friendly way of using the native HTML text input control.

  ## Examples
{{/markdown-convert}}

<div class="row">
  <div class="col-xs-3">
    {{text-input
      value=basicValue
      placeholder='do it now'
      onChange=(mut basicValue)
    }}
    <p class="text-muted">
      controller value: "{{basicValue}}"
    </p>
  </div>
  <div class="col-sm-9  col-md-4">
    <span>
      <p><b>Immediate Update</b></p>
      <pre><code class='handlebars'>\{{text-input
  value=basicValue
  placeholder='do it now'
  onChange=(mut basicValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      In the bad old _pre_-DDAU days we got "immediate" updates out of the box. A lot of people liked that. Well with this addon and the help of the `mut` helper you can now have it again with very little additional syntax but with the goodness of DDAU working for you.
    {{/ui-markdown}}
  </div>
</div>

<div class="row">
  <div class="col-xs-3">
    {{text-input
      value=blurValue
      placeholder='in your own time'
      onBlur=(mut blurValue)
    }}
    <p class="text-muted">
      controller value: "{{blurValue}}"
    </p>
  </div>
  <div class="col-sm-9 col-md-4">
    <span>
      <p><b>Update on Blur</b></p>
      <pre><code class='handlebars'>\{{text-input
  value=blurValue
  placeholder='in your own time'
  onBlur=(mut blurValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      In other cases, you may not want the "noise" of updating properties as you type but rather you'd like the container to only be updated when the input control losses focus (aka, blur). To do that just put the `mut` helper on the "onBlur" event.
    {{/ui-markdown}}
  </div>
</div>

<hr>

<div class="row">
  <div class="col-xs-3">
    {{text-input
      value=sizeValue
      size=size
      placeholder='size me up'
      onBlur=(mut sizeValue)
    }}
    <p class="text-muted">
      controller value: "{{sizeValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='tiny,small,default,large,huge'
        size='tiny'
        value=size
        defaultValue='default'
        onChange=(mut size)
      }}
    </p>
  </div>
  <div class="col-sm-9 col-md-4">
    <span>
      <p><b>Sizing</b></p>
      <pre><code class='handlebars'>\{{text-input
  value=sizeValue
  size={{size}}
  placeholder='size me up'
  onBlur=(mut sizeValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      In other cases, you may not want the "noise" of updating properties as you type but rather you'd like the container to only be updated when the input control losses focus (aka, blur). To do that just put the `mut` helper on the "onBlur" event.
    {{/ui-markdown}}
  </div>
</div>

<hr>

<div class="row">
  <div class="col-xs-3">
    {{text-input
      value=moodyValue
      mood=mood
      inGroup=inGroup
      placeholder='emotional train wreck'
      onChange=(mut moodyValue)
    }}
    <p class="text-muted">
      controller value: "{{moodyValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='default,success,warning,danger'
        size='tiny'
        value=mood
        defaultValue='default'
        onChange=(mut mood)
      }}
    </p>
  </div>
  <div class="col-sm-9 col-md-4">
    <span>
      <p><b>Mood</b></p>
      <pre><code class='handlebars'>\{{text-input
  value=moodyValue
  mood="{{mood}}"
  placeholder='emotional train wreck'
  onChange=(mut moodyValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      If you've used any of the other `ui-*` addons you'll be familiar with the "mood" property. In Bootstrap they have a concept of "validation" which resembles what the _mood_ property would typically control (aka, visual color coding).

      However, due to CSS design considerations, Bootstrap controls this in a parent container called a `form-group`. We have included that as a seperate component and you will need to wrap this component if you wish to get that functionality (which includes icon indicators as well as color coding).

      However, if you'd like to just add some color, while maintaining atomicity of just an HTML 'input' tag then just set mood on this component.
    {{/ui-markdown}}
  </div>
</div>

<hr>

<div class="row">
  <div class="col-xs-3">
    {{text-input
      pre='@'
      value=addonValue
      placeholder='enter your email'
      onChange=(mut addonValue)
    }}
    <p class="text-muted">
      controller value: "{{addonValue}}"
    </p>
    {{text-input
      preIcon='calendar'
      post='.00'
      value=payupValue
      placeholder='pay up'
      onChange=(mut payupValue)
    }}
    <p class="text-muted">
      controller value: "{{payupValue}}"
    </p>
  </div>
  <div class="col-sm-9  col-md-4">
    <span>
      <p><b>Addons</b></p>
      <pre><code class='handlebars'>\{{text-input
  pre='@'
  value=addonValue
  placeholder='do it now'
  onChange=(mut addonValue)
}}

\{{text-input
  preIcon='calendar'
  post='.00'
  value=payupValue
  placeholder='pay up'
  onChange=(mut payupValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      _Addons_ are UI features that appear to be attached to the input control (either to the left or right). They do break the "atomicity" of a single HTML element but in this case we've felt it made sense to include as part of this component rather than mimic Bootstrap's structure (of course the components will produce a BS-compliant HTML output).

      In the _inline_ mode the properties you can set are:

      | text | icon | button |
      |------|------|--------|
      | pre | preIcon | preButton |
      | post | postIcon | postButton |

    {{/ui-markdown}}
  </div>
</div>

{{! BLOCK STYLE ADDONS}}

<div class="row">
  <div class="col-xs-3">
    {{#text-input
      name='quantity-checker'
      onChange=(mut blockValue)
      as |i|
    }}
      {{#i.label}}Quantity{{/i.label}}
      {{#i.group as |g|}}
        {{g.addon '#'}}
        {{g.input}}
        {{g.button 'submit'}}
      {{/i.group}}
    {{/text-input}}
    <p class="text-muted">
      controller value: "{{blockValue}}"
    </p>
  </div>
  <div class="col-sm-9  col-md-4">
      <p><b>Block Style Addons</b></p>
      <pre><code class='handlebars'>\{{text-input
  pre='@'
  value=addonValue
  placeholder='do it now'
  onChange=(mut addonValue)
}}
</code></pre>
  </div>
  <div class="col-md-5 hidden-sm-down">
    {{#ui-markdown style='github'}}
      When we start to explore the _block_ format we just need an understanding of what each component yields WRT to contextual components or variables. There are an almost unlimited number of ways you can combine these, to the left you see some relatively unimaginative examples.

    {{/ui-markdown}}
  </div>
</div>
