{{#markdown-convert style='github'}}
  ## Component: `text-input`

  The `text-input` component provides a Bootstrap 4.x, HTML5 friendly way of using the native HTML text input control.

  ## Examples
{{/markdown-convert}}

<div class="flash-messages">
  {{#each flashMessages.queue as |flash|}}
    {{#flash-message flash=flash as |component flash|}}
      {{#if flash.componentName}}
        {{component flash.componentName content=flash.content}}
      {{else}}
        <h6>{{component.flashType}}</h6>
        <p>{{flash.message}}</p>
      {{/if}}
    {{/flash-message}}
  {{/each}}
</div>


<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=basicValue
      placeholder='do it now'
      onChange=(action (mut basicValue))
      onSubmit=(action 'submitDetected')
    }}
    <p class="text-muted">
      controller value: "{{basicValue}}"
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Immediate Update</b>
      <pre><code class='handlebars'>\{{text-input
  value=basicValue
  placeholder='do it now'
  onChange=(action (mut basicValue))
  onSubmit=(action 'submitDetected')
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      In the bad old _pre_-DDAU days we got "immediate" updates out of the box. A lot of people liked that. Well with this addon and the help of the `mut` helper you can now have it again with very little additional syntax but with the goodness of DDAU working for you.
    {{/ui-markdown}}
  </div>
</div>

<div class="row">
  <div class="col-3">
    {{text-input
      value=blurValue
      placeholder='in your own time'
      onBlur=(action (mut blurValue))
    }}
    <p class="text-muted">
      controller value: "{{blurValue}}"
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Update on Blur</b>
      <pre><code class='handlebars'>\{{text-input
  value=blurValue
  placeholder='in your own time'
  onBlur=(action (mut blurValue))
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      In other cases, you may not want the "noise" of updating properties as you type but rather you'd like the container to only be updated when the input control losses focus (aka, blur). To do that just put the `mut` helper on the "onBlur" event.
    {{/ui-markdown}}
  </div>
</div>

<hr>

<div class="row">
  <div class="col-3">
    {{text-input
      value=sizeValue
      size=size
      placeholder='size me up'
      onBlur=(mut sizeValue)
    }}
    <p class="text-muted">
      controller value: "{{sizeValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='tiny,small,default,large,huge'
        size='tiny'
        value=size
        defaultValue='default'
        onChange=(mut size)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Sizing</b>
      <pre><code class='handlebars'>\{{text-input
  value=sizeValue
  size={{size}}
  placeholder='size me up'
  onBlur=(mut sizeValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      In other cases, you may not want the "noise" of updating properties as you type but rather you'd like the container to only be updated when the input control losses focus (aka, blur). To do that just put the `mut` helper on the "onBlur" event.
    {{/ui-markdown}}
  </div>
</div>

{{! MOOD }}
<hr>

<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=moodyValue
      mood=mood
      inGroup=inGroup
      placeholder='emotional train wreck'
      onChange=(mut moodyValue)
    }}
    <p class="text-muted">
      controller value: "{{moodyValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='default,success,warning,danger'
        size='tiny'
        value=mood
        defaultValue='default'
        onChange=(mut mood)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Mood</b>
      <pre><code class='handlebars'>\{{text-input
  value=moodyValue
  mood="{{mood}}"
  placeholder='emotional train wreck'
  onChange=(mut moodyValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      If you've used any of the other `ui-*` addons you'll be familiar with the "mood" property. In Bootstrap they have a concept of "validation" which resembles what the _mood_ property would typically control (aka, visual color coding).

      However, due to CSS design considerations, Bootstrap controls this in a parent container called a `form-group`. We have included that as a seperate component and you will need to wrap this component if you wish to get that functionality (which includes icon indicators as well as color coding).

      However, if you'd like to just add some color, while maintaining atomicity of just an HTML 'input' tag then just set mood on this component.
    {{/ui-markdown}}
  </div>
</div>

<hr> {{! SKINNING }}
<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=skinValue
      skin=skin
      placeholder='hey good looking'
      onChange=(mut skinValue)
    }}
    <p class="text-muted">
      controller value: "{{skinValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='default,bs-nada,flat,minimal'
        size='tiny'
        value=skin
        defaultValue='default'
        onChange=(mut skin)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Skinning</b>
      <pre><code class='handlebars'>\{{text-input
  skin="{{skin}}"
  value=skinValue
  placeholder='hey good looking'
  onChange=(mut skinValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      Skinning is the ability to change the look and feel of a visual component with a simple configuration switch. This is largely applied with CSS but this addon hopefully helps a bit more with a structure for this skinning.

      This point-of-view starts with the `skin` property which you can set to any value you please. If that value starts with "bs-" then it will simply add the `.skin-[name]` class to the input. If the name does _not_ start with "bs-" then it will remove most of the BS styling so you are working with a fresher palate.

      > **Note:** not a lot has been done to flesh this out yet but feel free to contribute with a PR
    {{/ui-markdown}}
  </div>
</div>

<hr> {{! ALIGNMENT }}
<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=alignValue
      align=alignment
      placeholder='alignment'
      onChange=(mut alignValue)
    }}
    <p class="text-muted">
      controller value: "{{skinValue}}"
    </p>
    <p>
      {{ui-buttons
        buttons='left,right,center'
        size='small'
        value=alignment
        defaultValue='left'
        onChange=(mut alignment)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Alignment</b>
      <pre><code class='handlebars'>\{{text-input
  value=alignValue
  align="{{alignment}}"
  placeholder='alignment'
  onChange=(mut alignValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      Where the input value (and placeholder) goes within the input control can be important. By default a number will default to the right, everything else to the left. If you want to control this, however, you can state your preference explicitly.
    {{/ui-markdown}}
  </div>
</div>


<hr> {{! EMPTY IS ... }}
<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=emptyValue
      ifEmpty=ifEmpty
      placeholder='you\'re so vacuous'
      onChange=(mut emptyValue)
    }}
    <p class="text-muted">
      container value type: {{type-of emptyValue}}<br>
    </p>
    <p>
      {{ui-buttons
        buttons='default:::undefined,null,undefined'
        size='tiny'
        value=ifEmpty
        defaultValue='default'
        onChange=(mut ifEmpty)
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Empty is ...</b>
      <pre><code class='handlebars'>\{{text-input
  value=emptyValue
  ifEmpty="{{ifEmpty}}"
  placeholder='you\'re so vacuous'
  onChange=(mut emptyValue)
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      The `text-input` takes a "string input." Obviously. But what about when the control is empty? By default it will translate to an empty string but sometimes it would be better if it were _null_ or _undefined_. Both are possible by setting the `ifEmpty` parameter.

      To see this in action, add some text and then remove it (when initialized the value is just whatever the container says it is).
    {{/ui-markdown}}
  </div>
</div>

<hr>

<div class="row">
  <div class="col-6 col-lg-3">

    {{text-input
      preIcon='calendar'
      post='.00'
      value=payupValue
      placeholder='pay up'
      onChange=(action (mut payupValue))
    }}
    <p class="text-muted">
      controller value: "{{payupValue}}"
    </p>
  </div>
</div>

<hr> {{! GROUP WITH BUTTON }}
<div class="row">
  <div class="col-6 col-lg-3">
    {{text-input
      value=groupWithButton
      postButton='submit'
      mood=moodForInputControl
      placeholder='pressing my button'
      onChange=(action (mut groupWithButton))
      onPressed=(action 'buttonPressed')
    }}
    <p class="text-muted">
      component value: "{{groupWithButton}}"<br>
    </p>
    <p>
      Mood of Input component:
    </p>
    <p>
      {{ui-buttons
        value=moodForInputControl
        buttons='primary,success,danger,info'
        size='small'
        onChange=(mut moodForInputControl)
      }}
    </p>
    <hr>
    <p>
      {{text-input
        value=groupWithButton2
        preIcon='times'
        postIcon='check'
        preButton=' '
        button=' '
        preButtonMood='danger'
        buttonMood='success'
        mood=moodForInputControl
        placeholder='alt'
        onChange=(action (mut groupWithButton2))
        onPressed=(action 'buttonPressed')
      }}
    </p>
  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Submit with a Button</b>
      <pre><code class='handlebars'>\{{text-input
  value=groupWithButton
  mood="{{moodForInputControl}}"
  postButton='submit'
  placeholder="pressing my button"
  onChange=(action (mut groupWithButton))
  onPressed=(action 'buttonPressed')
}}</code></pre>
      <hr>
      <pre><code class='handlebars'>\{{text-input
  value=groupWithButton2
  preIcon='times'
  postIcon='check'
  preButton=' '
  postButton=' '
  preButtonMood='danger'
  postButtonMood='success'
  mood=moodForInputControl
  button='submit'
  placeholder="alt"
  onChange=(action (mut groupWithButton2))
  onPressed=(action 'buttonPressed')
}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      If the containing application has the `ui-button` component installed then the **preButton** and **postButton** properties on inputs will allow you place a button as included part of the inline component.

      > **Note:** you can use `button` as an alias for `postButton`

      Also of note, if you change the "mood" of the input the button will by default take up that mood too (try this with controls to left). If, you want the button to stay fixed on particular mood independant of the input control you can do this too (see second example).

      > **Note:** if you specify a _pre_ or _post_ icon and there is a button in that location than the icon becomes a part of the button.
    {{/ui-markdown}}
  </div>
</div>

<hr> {{! BLOCK STYLE }}
<div class="row">
  <div class="col-6 col-lg-3">
     {{#text-input
        value=blockStyle
        placeholder='block styling'
        onChange=(mut blockStyle)
        onPressed=(action 'buttonPressed')
        as |i|
      }}
        {{#i.group as |g|}}
          {{g.input}}
          {{g.button icon='times' mood='danger'}}
          {{g.button icon='check' mood='success'}}
        {{/i.group}}
      {{/text-input}}
    <p class="text-muted">
      component value: "{{blockStyle}}"<br>
    </p>

  </div>
  <div class="col-6 col-lg-4">
    <span>
      <b>Block Style</b>
      <pre><code class='handlebars'>\{{#text-input
  value=blockStyle
  placeholder='block styling'
  onChange=(mut blockStyle)
  onPressed=(action 'buttonPressed')
  as |i|
}}
  \{{#i.group as |g|}}
    \{{g.input}}
    \{{g.button icon='times' mood='danger'}}
    \{{g.button icon='check' mood='success'}}
  \{{/i.group}}
\{{/text-input}}</code></pre>
    </span>
  </div>
  <div class="col-12 col-lg-5">
    {{#ui-markdown style='github'}}
      Up to now we've been trying to make the _inline_ style meet all of our needs but as we approach more bespoke conditions the API surface gets more verbose and a purely flat API to do everything starts to become impractical.

      Fortunately the block style is also available as this example illustrates.
    {{/ui-markdown}}
  </div>
</div>